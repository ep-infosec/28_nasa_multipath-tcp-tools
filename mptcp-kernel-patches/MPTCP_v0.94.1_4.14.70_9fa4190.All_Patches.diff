diff --git a/include/net/tcp.h b/include/net/tcp.h
index 6e13abe..91c8715 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -140,8 +140,8 @@ void tcp_time_wait(struct sock *sk, int state, int timeo);
 #define TCP_RTO_MAX	((unsigned)(120*HZ))
 #define TCP_RTO_MIN	((unsigned)(HZ/5))
 #define TCP_TIMEOUT_MIN	(2U) /* Min timeout for TCP timers in jiffies */
-#define TCP_TIMEOUT_INIT ((unsigned)(1*HZ))	/* RFC6298 2.1 initial RTO value	*/
-#define TCP_TIMEOUT_FALLBACK ((unsigned)(3*HZ))	/* RFC 1122 initial RTO value, now
+#define TCP_TIMEOUT_INIT ((unsigned)(5*HZ))	/* RFC6298 2.1 initial RTO value, modified to 5 seconds.*/
+#define TCP_TIMEOUT_FALLBACK ((unsigned)(5*HZ))	/* RFC 1122 initial RTO value, modified to 5 seconds. Now
 						 * used as a fallback RTO for the
 						 * initial data transmission if no
 						 * valid RTT sample has been acquired,
diff --git a/net/mptcp/mptcp_fullmesh.c b/net/mptcp/mptcp_fullmesh.c
index 8b534cc..085255f 100644
--- a/net/mptcp/mptcp_fullmesh.c
+++ b/net/mptcp/mptcp_fullmesh.c
@@ -93,8 +93,14 @@ struct mptcp_fm_ns {
 };
 
 static int num_subflows __read_mostly = 1;
+static int dont_remove __read_mostly = 1;
+static int ignore_iface __read_mostly = 1;
 module_param(num_subflows, int, 0644);
+module_param(dont_remove, int, 0644);
+module_param(ignore_iface, int, 0644);
 MODULE_PARM_DESC(num_subflows, "choose the number of subflows per pair of IP addresses of MPTCP connection");
+MODULE_PARM_DESC(dont_remove, "if set, never issue REMOVE_ADDR messages.  Useful if all interfaces share a common address");
+MODULE_PARM_DESC(ignore_iface, "if set, only unique IP address will create additional subflows.  Otherwise, use both address and interface (a new interface with a previously used address will generate a new subflow");
 
 static int create_on_err __read_mostly;
 module_param(create_on_err, int, 0644);
@@ -1078,12 +1084,14 @@ static void addr4_event_handler(const struct in_ifaddr *ifa, unsigned long event
 	mpevent.family = AF_INET;
 	mpevent.addr.in.s_addr = ifa->ifa_local;
 	mpevent.low_prio = (netdev->flags & IFF_MPBACKUP) ? 1 : 0;
-	mpevent.if_idx  = netdev->ifindex;
+	mpevent.if_idx  = (ignore_iface) ? 0 : netdev->ifindex;
 
 	if (event == NETDEV_DOWN || !netif_running(netdev) ||
-	    (netdev->flags & IFF_NOMULTIPATH) || !(netdev->flags & IFF_UP))
+	    (netdev->flags & IFF_NOMULTIPATH) || !(netdev->flags & IFF_UP)) {
+		if(dont_remove && !(netdev->flags & IFF_NOMULTIPATH))
+			goto exit;
 		mpevent.code = MPTCP_EVENT_DEL;
-	else if (event == NETDEV_UP)
+	} else if (event == NETDEV_UP)
 		mpevent.code = MPTCP_EVENT_ADD;
 	else if (event == NETDEV_CHANGE)
 		mpevent.code = MPTCP_EVENT_MOD;
@@ -1092,6 +1100,7 @@ static void addr4_event_handler(const struct in_ifaddr *ifa, unsigned long event
 		    &ifa->ifa_local, mpevent.code, mpevent.low_prio, mpevent.if_idx);
 	add_pm_event(net, &mpevent);
 
+exit:
 	spin_unlock_bh(&fm_ns->local_lock);
 	return;
 }
@@ -1202,12 +1211,14 @@ static void addr6_event_handler(const struct inet6_ifaddr *ifa, unsigned long ev
 	mpevent.family = AF_INET6;
 	mpevent.addr.in6 = ifa->addr;
 	mpevent.low_prio = (netdev->flags & IFF_MPBACKUP) ? 1 : 0;
-	mpevent.if_idx = netdev->ifindex;
+	mpevent.if_idx = (ignore_iface) ? 0 : netdev->ifindex;
 
 	if (event == NETDEV_DOWN || !netif_running(netdev) ||
-	    (netdev->flags & IFF_NOMULTIPATH) || !(netdev->flags & IFF_UP))
+	    (netdev->flags & IFF_NOMULTIPATH) || !(netdev->flags & IFF_UP)) {
+		if(dont_remove && !(netdev->flags & IFF_NOMULTIPATH))
+			goto exit;
 		mpevent.code = MPTCP_EVENT_DEL;
-	else if (event == NETDEV_UP)
+	} else if (event == NETDEV_UP)
 		mpevent.code = MPTCP_EVENT_ADD;
 	else if (event == NETDEV_CHANGE)
 		mpevent.code = MPTCP_EVENT_MOD;
@@ -1216,6 +1227,7 @@ static void addr6_event_handler(const struct inet6_ifaddr *ifa, unsigned long ev
 		    &ifa->addr, mpevent.code, mpevent.low_prio, mpevent.if_idx);
 	add_pm_event(net, &mpevent);
 
+exit:
 	spin_unlock_bh(&fm_ns->local_lock);
 	return;
 }
@@ -1323,7 +1335,10 @@ static void full_mesh_new_session(const struct sock *meta_sk)
 #endif
 	}
 
-	if (inet_sk(meta_sk)->transparent)
+	/* unset if_idx if ignore is set */
+  if (ignore_iface)
+    if_idx = 0;
+  else if (inet_sk(meta_sk)->transparent)
 		if_idx = inet_sk(meta_sk)->rx_dst_ifindex;
 
 	rcu_read_lock_bh();
